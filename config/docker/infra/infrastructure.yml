version: "3.9"
# nginx + minio + mariadb + postgres + redis

networks:
  default:
    name: ${NETWORK_NAME} # self-defined network for docker

services:
  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    networks:
      - app_network
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /etc/nginx:/etc/nginx # Nginx config files
      - /etc/letsencrypt:/etc/letsencrypt # SSL/TLS Certificates
      - /var/www/html:/var/www/html # Home for all Web App. CHANGE IF NEEDED!
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  minio:
    image: minio/minio:latest
    container_name: minio
    restart: unless-stopped
    networks:
      - app_network
    ports:
      - "9000:9000" # API
      - "9001:9001" # Console
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER} # admin username
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD} # admin password
    volumes:
      - /var/lib/minio:/data # Storage for minio. CHANGE IF NEEDED!
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  mariadb:
    image: mariadb:${MYSQL_VERSION} # support 10, 11，latest, ...
    container_name: mariadb
    restart: unless-stopped
    networks:
      - app_network
    ports:
      - "3306:3306"
    volumes:
      - /var/lib/mysql:/var/lib/mysql # mysql data
      - /etc/mysql:/etc/mysql # mysql config files
    user: ${MYSQL_GUID} # e.g. 999:999，UID:GID for mysql user
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}

  postgres:
    image: postgres:${POSTGRES_VERSION} # support 14, 15, 16, latest, ...
    container_name: postgres
    restart: unless-stopped
    networks:
      - app_network
    ports:
      - "5432:5432"
    volumes:
      - /var/lib/postgresql/data:/var/lib/postgresql/data
    user: ${POSTGRES_GUID} # e.g. 999:999，UID:GID for postgres user
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: postgres
      POSTGRES_INITDB_ARGS: "--data-checksums"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis
    container_name: redis
    restart: unless-stopped
    networks:
      - app_network
    ports:
      - "6379:6379"
    volumes:
      - /var/lib/redis/data:/data
    command: redis-server --requirepass ${REDIS_PASSWORD}
    user: ${REDIS_GUID} # e.g. 999:999，UID:GID for redis user
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
